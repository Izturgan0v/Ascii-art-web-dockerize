# Используем официальный образ Go версии 1.24.2 (как указано в go.mod)
# Это базовый образ для компиляции Go приложений
FROM golang:1.24.2-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы зависимостей (go.mod и go.sum)
# Это делается отдельно для оптимизации кэширования Docker слоев
COPY go.mod go.sum* ./

# Загружаем все зависимости Go
# Флаг -d означает "только загрузка, без установки"
RUN go mod download

# Копируем весь исходный код приложения
COPY . .

# Компилируем Go приложение
# Флаги:
# - CGO_ENABLED=0: отключаем CGO для создания статически связанного бинарного файла
# - GOOS=linux: указываем целевую операционную систему
# - GOARCH=amd64: указываем целевую архитектуру
# -a: пересобираем все пакеты
# -installsuffix cgo: добавляем суффикс к именам пакетов
# -o server: указываем имя выходного файла
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o server .

# Второй этап: создаем минимальный образ для запуска
# Используем Alpine Linux - очень легкий дистрибутив
FROM alpine:latest

# Устанавливаем ca-certificates для HTTPS соединений
# Это необходимо для безопасных HTTP запросов
RUN apk --no-cache add ca-certificates

# Создаем непривилегированного пользователя для безопасности
# Это хорошая практика - не запускать приложение от root
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Создаем рабочую директорию для приложения
WORKDIR /app

# Копируем скомпилированный бинарный файл из первого этапа
COPY --from=builder /app/server .

# Копируем папку с шаблонами HTML
# Эти файлы нужны для работы веб-интерфейса
COPY --from=builder /app/templates ./templates

# Копируем папку с ASCII арт баннерами
# Эти файлы содержат символы для генерации ASCII искусства
COPY --from=builder /app/ascii-art ./ascii-art

# Изменяем владельца файлов на непривилегированного пользователя
RUN chown -R appuser:appgroup /app

# Переключаемся на непривилегированного пользователя
USER appuser

# Открываем порт 45674 (как указано в main.go)
# Это порт, на котором работает ваше приложение
EXPOSE 45674

# Команда для запуска приложения
# Запускаем скомпилированный Go сервер
CMD ["./server"] 